points(P_wall ~ pH, data = d1[d1$cue == "pisaster",], col = "purple", pch = 19)
with(d1, plot(P_bot ~ pH, type = "n", xlab = "pH acclimation", ylab = "prop time on wall", bty = "n", main = "Prop wall"))
points(P_wall ~ pH, data = d1[d1$cue == "crab",], col = "red", pch = 19)
with(d1, plot(P_bot ~ pH, type = "n", xlab = "pH acclimation", ylab = "prop time in corner", bty = "n", main = "Prop corner"))
points(P_cor ~ pH, data = d1[d1$cue == "no cue",], col = "black", pch = 19)
with(d1, plot(P_bot ~ pH, type = "n", xlab = "pH acclimation", ylab = "prop time in corner", bty = "n", main = "Prop corner"))
points(P_cor ~ pH, data = d1[d1$cue == "no cue",], col = "black", pch = 19)
with(d1, plot(P_bot ~ pH, type = "n", xlab = "pH acclimation", ylab = "prop time in corner", bty = "n", main = "Prop corner"))
points(P_cor ~ pH, data = d1[d1$cue == "pisaster",], col = "purple", pch = 19)
with(d1, plot(P_bot ~ pH, type = "n", xlab = "pH acclimation", ylab = "prop time in corner", bty = "n", main = "Prop corner"))
points(P_cor ~ pH, data = d1[d1$cue == "crab",], col = "red", pch = 19)
cor = glmer(cbind(Wall, Not_wall) ~ cue * pH + (1|ind) + (1|accbin) + (1|arena) + (1|trial), data = d1, family = binomial, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
summary(cor)
cor = glmer(cbind(Corner, Not_cor) ~ cue * pH + (1|ind) + (1|accbin) + (1|arena) + (1|trial), data = d1, family = binomial, control= glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
summary(cor)
cor = glmer(cbind(Corner, Not_cor) ~ cue * pH + (1|ind) + (1|accbin) + (1|arena) + (1|trial), data = d1, family = binomial, control= glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
d1.1 = expand.grid(pH = seq(from = 6.1, to = 8.3, by = 0.05), cue = c('crab', 'no cue', 'pisaster'), Out2 = 0, In2 = 0)
mm1 = model.matrix(terms(cor), d1.1)
d1.1 = expand.grid(pH = seq(from = 6.1, to = 8.3, by = 0.05), cue = c('crab', 'no cue', 'pisaster'), Corner = 0, Not_cor = 0)
mm1 = model.matrix(terms(cor), d1.1)
d1.1$out = mm1%*%fixef(glmer1)
pvar1 = diag(mm1%*%tcrossprod(vcov(cor), mm1))
cmult = 1.96
newdat1 = data.frame(d1.1, plo = d1.1$corner - cmult * sqrt(pvar1), phi = d1.1$corner + cmult * sqrt(pvar1))
newdat1 = data.frame(d1.1, plo = d1.1$out - cmult * sqrt(pvar1), phi = d1.1$out + cmult * sqrt(pvar1))
d1.1$out = mm1%*%fixef(glmer1)
d1.1$out = mm1%*%fixef(cor)
mm1 = model.matrix(terms(cor), d1.1)
d1.1$out = mm1%*%fixef(cor)
pvar1 = diag(mm1%*%tcrossprod(vcov(cor), mm1))
cmult = 1.96
newdat1 = data.frame(d1.1, plo = d1.1$out - cmult * sqrt(pvar1), phi = d1.1$out + cmult * sqrt(pvar1))
plot(plogis(out) ~ pH, ylim = c(0,1), xlim = c(6.1,8.3), data = d1.1, bty = "n", type = "n", ylab = "Proportion of time out of water", xlab = "pH (Total scale)")
CrCI = newdat1[newdat1$cue == "crab",]
PCI = newdat1[newdat1$cue == "pisaster",]
NoCI = newdat1[newdat1$cue == "no cue",]
polygon(c(CrCI$pH,rev(CrCI$pH)),c(plogis(CrCI$plo),rev(plogis(CrCI$phi))),col="light pink", border = NA)
polygon(c(PCI$pH,rev(PCI$pH)),c(plogis(PCI$plo),rev(plogis(PCI$phi))),col="thistle", border = NA)
polygon(c(NoCI$pH,rev(NoCI$pH)),c(plogis(NoCI$plo),rev(plogis(NoCI$phi))),col="grey85", border = NA)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'pisaster',], col = "orchid4", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'crab',], col = "red", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'no cue',], col = "black", pch = 16)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
glmer1 = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind) + (1|accbin), data = d1, family = binomial, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
glmer1 = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind) + (1|accbin), data = d1, family = binomial, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
#rename c and nc to numbers for new dataframe...because we are using mean function
data$treatment[data$treatment == "no cue"] = 0
data$treatment[data$treatment == "pisaster" ] = 1
data$treatment[data$treatment == "crab"] = 2
data$treatment = as.numeric(data$treatment)
data$ind = as.factor(data$ind)
d1 = data%>% group_by(ind) %>% dplyr::summarise(trial = mean(Trial_main), arena = mean(bin), accbin = mean(acc_tank), pH = mean(pH_ave), cue = mean(treatment), P_in1 = sum(in_out)/n(), P_in2 = sum(in_out2)/n(), In1 = sum(in_out), In2 = sum(in_out2), Total = length(ind), Out1 = Total - In1, Out2 = Total - In2, P_out1 = 1-P_in1, P_out2 = 1-P_in2, Corner = sum(corner), Not_cor = Total - Corner, Wall = sum(wall), Not_wall = Total - Wall, Bottom = sum(bottom), Not_bot = Total - Bottom, P_cor = sum(corner)/Total, P_wall = sum(wall)/Total, P_bot = sum(Bottom)/Total)
d1$cue[d1$cue == "0"] = "no cue"
d1$cue[d1$cue == "1"] = "pisaster"
d1$cue[d1$cue == "2"] = "crab"
View(d1)
#filtering out all of the wonky datapoints based on going over raw data notes.
d1 = d1[d1$ind != 7 & d1$ind != 192 & d1$ind != 193 & d1$ind != 194 & d1$ind != 195 & d1$ind != 39 & d1$ind != 50 & d1$ind != 67 & d1$ind != 148 & d1$ind != 205 & d1$ind != 37 & d1$ind != 79 & d1$ind != 18 & d1$ind != 188 & d1$ind != 138 & d1$ind != 140 & d1$ind != 225 & d1$ind != 128,]
glmer1 = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind) + (1|accbin), data = d1, family = binomial, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
d1.1 = expand.grid(pH = seq(from = 6.1, to = 8.3, by = 0.05), cue = c('crab', 'no cue', 'pisaster'), Out2 = 0, In2 = 0)
mm1 = model.matrix(terms(glmer1), d1.1)
d1.1$out = mm1%*%fixef(glmer1)
pvar1 = diag(mm1%*%tcrossprod(vcov(glmer1), mm1))
cmult = 1.96
newdat1 = data.frame(d1.1, plo = d1.1$out - cmult * sqrt(pvar1), phi = d1.1$out + cmult * sqrt(pvar1))
plot(plogis(out) ~ pH, ylim = c(0,1), xlim = c(6.1,8.3), data = d1.1, bty = "n", type = "n", ylab = "Proportion of time out of water", xlab = "pH (Total scale)")
par(mfrow = c(1,1))
plot(plogis(out) ~ pH, ylim = c(0,1), xlim = c(6.1,8.3), data = d1.1, bty = "n", type = "n", ylab = "Proportion of time out of water", xlab = "pH (Total scale)")
CrCI = newdat1[newdat1$cue == "crab",]
PCI = newdat1[newdat1$cue == "pisaster",]
NoCI = newdat1[newdat1$cue == "no cue",]
polygon(c(CrCI$pH,rev(CrCI$pH)),c(plogis(CrCI$plo),rev(plogis(CrCI$phi))),col="light pink", border = NA)
polygon(c(PCI$pH,rev(PCI$pH)),c(plogis(PCI$plo),rev(plogis(PCI$phi))),col="thistle", border = NA)
polygon(c(NoCI$pH,rev(NoCI$pH)),c(plogis(NoCI$plo),rev(plogis(NoCI$phi))),col="grey85", border = NA)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'pisaster',], col = "orchid4", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'crab',], col = "red", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'no cue',], col = "black", pch = 16)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
abline(h = .60, col = "red", lwd = 1.5)
abline(h = .22, col = "black", lwd = 1.5)
abline(v = 8.1, col = "blue", lwd = 2, lty = 3)
abline(v = 8.03, col = "yellow", lwd = 2, lty = 3)
legend(x = 6.2, y = 1, legend = c('pisaster', 'crab', 'no cue'), box.lty = 0, fill = c('purple', 'red', 'black'), bg = "white")
legend(x = 6.2, y = 1.2, legend = c('pisaster', 'crab', 'no cue'), box.lty = 0, fill = c('purple', 'red', 'black'), bg = "white")
legend(x = 6.2, y = 1.1, legend = c('pisaster', 'crab', 'no cue'), box.lty = 0, fill = c('purple', 'red', 'black'), bg = "white")
par(mfrow = c(1,1))
plot(plogis(out) ~ pH, ylim = c(0,1), xlim = c(6.1,8.3), data = d1.1, bty = "n", type = "n", ylab = "Proportion of time out of water", xlab = "pH (Total scale)")
CrCI = newdat1[newdat1$cue == "crab",]
PCI = newdat1[newdat1$cue == "pisaster",]
NoCI = newdat1[newdat1$cue == "no cue",]
polygon(c(CrCI$pH,rev(CrCI$pH)),c(plogis(CrCI$plo),rev(plogis(CrCI$phi))),col="light pink", border = NA)
polygon(c(PCI$pH,rev(PCI$pH)),c(plogis(PCI$plo),rev(plogis(PCI$phi))),col="thistle", border = NA)
polygon(c(NoCI$pH,rev(NoCI$pH)),c(plogis(NoCI$plo),rev(plogis(NoCI$phi))),col="grey85", border = NA)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'pisaster',], col = "orchid4", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'crab',], col = "red", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'no cue',], col = "black", pch = 16)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
abline(h = .60, col = "red", lwd = 1.5)
#abline(h = .75, col = "red") flowing seawater from Geller
abline(h = .22, col = "black", lwd = 1.5)
#abline(h = .25, col = "black") flowing seawater from Geller
abline(v = 8.1, col = "blue", lwd = 2, lty = 3)
abline(v = 8.03, col = "yellow", lwd = 2, lty = 3)
legend(x = 6.2, y = 1.1, legend = c('pisaster', 'crab', 'no cue'), box.lty = 0, fill = c('purple', 'red', 'black'), bg = "white")
abline(v = 7.7, col = "orange", lwd = 2, lty = 3)
abline(v = 7.7, col = "grey", lwd = 2, lty = 3)
abline(v = 7.7, col = "dark grey", lwd = 2, lty = 3)
abline(v = 8.1, col = "green", lwd = 2, lty = 3)
abline(v = 8.03, col = "blue", lwd = 2, lty = 3)
data$treatment[data$treatment == "no cue"] = 0
data$treatment[data$treatment == "pisaster" ] = 1
data$treatment[data$treatment == "crab"] = 2
data$treatment = as.numeric(data$treatment)
data$ind = as.factor(data$ind)
data = data[data$ind != 7 & data$ind != 192 & data$ind != 193 & data$ind != 194 & data$ind != 195 & data$ind != 39 & data$ind != 50 & data$ind != 67 & data$ind != 148 & data$ind != 205 & data$ind != 37 & data$ind != 79 & data$ind != 18 & data$ind != 188 & data$ind != 138 & data$ind != 140 & data$ind != 225 & data$ind != 128,]
data3 = data%>% group_by(ind) %>% dplyr::summarise(pH = mean(pH_ave), accT = mean(acc_tank), Cue = mean(treatment), avX = mean(FX), avY = mean(FY), mdist = max(dist), midist = min(dist), avedis2 = mean(dist), avedis = sqrt((avX^2) + (avY^2)), Group = mean (Trial_main), avdiscent = (sum(sqrt((FX-avX)^2 + (FY-avY)^2)))/(length(ind)), wand = avdiscent/(sqrt(avX^2 + avY^2)))
data3$cent = pi*(data3$avdiscent)^2
data3$Cue[data3$Cue == "0"] = "no cue"
data3$Cue[data3$Cue == "1"] = "pisaster"
data3$Cue[data3$Cue == "2"] = "crab"
data3 = data3[data3$ind != 7 & data3$ind != 192 & data3$ind != 193 & data3$ind != 194 & data3$ind != 195 & data3$ind != 39 & data3$ind != 50 & data3$ind != 67 & data3$ind != 148 & data3$ind != 205 & data3$ind != 37 & data3$ind != 79 & data3$ind != 18 & data3$ind != 188 & data3$ind != 138 & data3$ind != 140 & data3$ind != 225 & data3$ind != 128,]
Hipis = data[data$treatment == "pisaster" & data$pH_ave > 7.9,]
Hicra = data[data$treatment == "crab" & data$pH_ave > 7.9,]
Hino = data[data$treatment == "no cue" & data$pH_ave > 7.9,]
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start for pH >7.9")
for(i in 1:length(unique(Hipis))){
lines(dist ~ time, data = Hipis[Hipis$ind == unique(Hipis$ind)[i],], col = "purple", pch = 19)
}
data$treatment[data$treatment == 0] = "no cue"
data$treatment[data$treatment == 1] = "pisaster"
data$treatment[data$treatment == 2] = "crab"
Hipis = data[data$treatment == "pisaster" & data$pH_ave > 7.9,]
Hicra = data[data$treatment == "crab" & data$pH_ave > 7.9,]
Hino = data[data$treatment == "no cue" & data$pH_ave > 7.9,]
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start for pH >7.9")
for(i in 1:length(unique(Hipis))){
lines(dist ~ time, data = Hipis[Hipis$ind == unique(Hipis$ind)[i],], col = "purple", pch = 19)
}
for(i in 1:length(unique(Hicra))){
lines(dist ~ time, data = Hicra[Hicra$ind == unique(Hicra$ind)[i],], col = "red", pch = 19)
}
for(i in 1:length(unique(Hino))){
lines(dist ~ time, data = Hino[Hino$ind == unique(Hino$ind)[i],], col = "black", pch = 19)
}
Lopis = data[data$treatment == "pisaster" & data$pH_ave < 7,]
Locra = data[data$treatment == "crab" & data$pH_ave < 7,]
Lono = data[data$treatment == "no cue" & data$pH_ave < 7,]
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start for pH <7")
for(i in 1:length(unique(Lopis))){
lines(dist ~ time, data = Lopis[Lopis$ind == unique(Lopis$ind)[i],], col = "purple", pch = 19)
}
for(i in 1:length(unique(Locra))){
lines(dist ~ time, data = Locra[Locra$ind == unique(Locra$ind)[i],], col = "red", pch = 19)
}
for(i in 1:length(unique(Lono))){
lines(dist ~ time, data = Lono[Lono$ind == unique(Lono$ind)[i],], col = "black", pch = 19)
legend(-80,45, legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
}
pis = data[data$treatment == "pisaster",]
cra = data[data$treatment == "crab",]
no = data[data$treatment == "no cue",]
n=16
PrbPal <- colorRampPalette(c("gray","Purple"))
CrbPal <- colorRampPalette(c("gray","Red"))
NrbPal <- colorRampPalette(c("gray","Black"))
p = PrbPal(n)[as.numeric(cut(pis$pH_ave,breaks = n))]
cr = CrbPal(n)[as.numeric(cut(cra$pH_ave,breaks = n))]
not = NrbPal(n)[as.numeric(cut(no$pH_ave,breaks = n))]
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
for(i in 1:length(unique(cra))){
lines(dist ~ time, data = cra[cra$ind == unique(cra$ind)[i],], col = cr, pch = 19)
}
for(i in 1:length(unique(no))){
lines(dist ~ time, data = no[no$ind == unique(no$ind)[i],], col = not, pch = 19)
}
legend('topleft', legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
c.agg = aggregate(dist~ind, data, max)
c.max = merge(c.agg, data)
c.max = as.data.frame(c.max)
c.min= (aggregate(time~ind, c.max, min))
c.both = merge(c.max, c.min)
c.both$treatment[c.both$treatment == 0] = "no cue"
c.both$treatment[c.both$treatment == 1] = "pisaster"
c.both$treatment[c.both$treatment == 2] = "crab"
Cpis = c.both[c.both$treatment == "pisaster",]
Ccra = c.both[c.both$treatment == "crab",]
Cno = c.both[c.both$treatment == "no cue",]
par(mfrow=c(1,1))
plot(time ~ pH_ave, data = c.both, type = "n", bty = "n", main = "time to max distance from origin", ylab = "timestamp")
points(time ~ pH_ave, data = Cpis, col = "purple", pch = 19)
points(time ~ pH_ave, data = Ccra, col = "red", pch = 19)
points(time ~ pH_ave, data = Cno, col = "black", pch = 19)
View(c.both)
c.agg = aggregate(dist~ind, data, max)
View(c.agg)
c.max = merge(c.agg, data)
View(c.max)
c.max = as.data.frame(c.max)
c.min= (aggregate(time~ind, c.max, min))
View(c.min)
View(c.max)
plot(data = c.both, x = timestamp, y = dist)
plot(data = c.both, x = c.both$timestamp, y = c.both$dist)
plot(c.both$dist~c.both$timestamp)
plot(c.both$dist~c.both$time)
plot(c.both$dist~c.both$time, col = as.factor(c.both$treatment), pch = 19)
plot(c.both$dist~c.both$time, col = as.factor(c.both$treatment), pch = 19)
plot(c.both$dist~c.both$time, col = as.factor(c.both$treatment), pch = 19, xlim = c(7,13))
plot(jitter(c.both$dist)~c.both$time, col = as.factor(c.both$treatment), pch = 19, xlim = c(7,13))
plot(jitter(c.both$dist,1)~c.both$time, col = as.factor(c.both$treatment), pch = 19, xlim = c(7,13))
plot(time ~ pH_ave, data = c.both, type = "n", bty = "n", main = "time to max distance from origin", ylab = "timestamp", ylim = c(7,13))
points(time ~ pH_ave, data = Cpis, col = "purple", pch = 19)
points(time ~ pH_ave, data = Ccra, col = "red", pch = 19)
points(time ~ pH_ave, data = Cno, col = "black", pch = 19)
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
n=100
PrbPal <- colorRampPalette(c("gray","Purple"))
CrbPal <- colorRampPalette(c("gray","Red"))
NrbPal <- colorRampPalette(c("gray","Black"))
p = PrbPal(n)[as.numeric(cut(pis$pH_ave,breaks = n))]
cr = CrbPal(n)[as.numeric(cut(cra$pH_ave,breaks = n))]
not = NrbPal(n)[as.numeric(cut(no$pH_ave,breaks = n))]
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
for(i in 1:length(unique(cra))){
lines(dist ~ time, data = cra[cra$ind == unique(cra$ind)[i],], col = cr, pch = 19)
}
for(i in 1:length(unique(no))){
lines(dist ~ time, data = no[no$ind == unique(no$ind)[i],], col = not, pch = 19)
}
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pis$pH_ave, pch = 19)
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = as.factor(pis$pH_ave), pch = 19)
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pis$pH_ave, pch = 19)
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
lines(data = pis, dist~time, col = p)
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
for(i in 1:length(unique(pis))){
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
unique(pis)
pis[pis$ind == unique(pis$ind)[i],]
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = PrbPal(n)[as.numeric(cut(pis$pH_ave,breaks = n))], pch = 19)
for(i in 1:length(unique(pis))){
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = PrbPal(n)[as.numeric(cut(pis$pH_ave,breaks = n))], pch = 19)
}
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
lines(data = pis, dist~time, col = p)
for(i in 1:length(unique(pis))){
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = PrbPal(n)[as.numeric(cut(pis$pH_ave,breaks = n))], pch = 19)
}
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], pch = 19)
for(i in 1:length(unique(pis))){
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], pch = 19)
}
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pH_ave, pch = 19)
for(i in 1:length(unique(pis))){
points(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pH_ave, pch = 19)
}
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pH_ave, pch = 19)
}
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pH_ave, pch = 19)
}
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = as.factor(pH_ave), pch = 19)
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = as.factor(pH_ave), pch = 19)
}
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pH_ave, pch = 19)
}
for(i in 1:length(unique(cra))){
lines(dist ~ time, data = cra[cra$ind == unique(cra$ind)[i],], col = pH_ave, pch = 19)
}
for(i in 1:length(unique(no))){
lines(dist ~ time, data = no[no$ind == unique(no$ind)[i],], col = pH_ave, pch = 19)
}
unique(pis$pH_ave)
n=46
PrbPal <- colorRampPalette(c("gray","Purple"))
CrbPal <- colorRampPalette(c("gray","Red"))
NrbPal <- colorRampPalette(c("gray","Black"))
p = PrbPal(n)[as.numeric(cut(pis$pH_ave,breaks = n))]
cr = CrbPal(n)[as.numeric(cut(cra$pH_ave,breaks = n))]
not = NrbPal(n)[as.numeric(cut(no$pH_ave,breaks = n))]
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = p, pch = 19)
}
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(pis))){
lines(dist ~ time, data = pis[pis$ind == unique(pis$ind)[i],], col = pH_ave, pch = 19)
}
pH_ave
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(cra))){
lines(dist ~ time, data = cra[cra$ind == unique(cra$ind)[i],], col = pH_ave, pch = 19)
}
for(i in 1:length(unique(no))){
lines(dist ~ time, data = no[no$ind == unique(no$ind)[i],], col = pH_ave, pch = 19)
}
plot(dist ~ time, data = data, type = "n", bty = "n", main = "snails paths after start", ylab = "distance from origin (cm)")
for(i in 1:length(unique(no))){
lines(dist ~ time, data = no[no$ind == unique(no$ind)[i],], col = pH_ave, pch = 19)
}
View(no)
plot(avY ~ avX, data = data3, bty = "n", type = "n", main = "average coordinates")
points(avY ~ avX, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(avY ~ avX, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(avY ~ avX, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
data3$Cue[data3$Cue == 0] = "no cue"
data3$Cue[data3$Cue == 1] = "pisaster"
data3$Cue[data3$Cue == 2] = "crab"
plot(avedis2 ~ pH, data = data3, bty = "n", type = "n", main = "ave distance from origin", ylab = "max distance (cm)", xlab = "pH treatment")
points(avedis2 ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(avedis2 ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(avedis2 ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
LM = lm(avedis2 ~ pH * Cue, data = data3)
abline(lm)
abline(lm(avedis2 ~ pH * Cue, data = data3))
summary(LM)
abline(-55.306,9.571, col = red)
abline(-55.306,9.571, col = red)
abline(-55.306,9.571)
abline(-55.306,9.571, col = "red")
abline(-106.241, 17.664, col = "purple")
abline(-32.044, 5.998,col = "black")
emtrends(LM)
t1 = emtrends(LM, ~Cue, var = "pH")
summary(emtrends(LM, ~Cue, var = "pH"))
contrast((emtrends(LM, ~Cue, var = "pH"), method = 'tukey')
trend1 = emtrends(cor, ~cue, var = "pH")
summary(trend1)
contrast(trend1, method = 'tukey')
```
contrast((emtrends(LM, ~Cue, var = "pH")), method = 'tukey')
plot(avedis2 ~ pH, data = data3, bty = "n", type = "n", main = "ave distance from origin", ylab = "distance(cm)", xlab = "pH treatment")
points(avedis2 ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(avedis2 ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(avedis2 ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
legend('topleft', legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
LM = lm(avedis2 ~ pH * Cue, data = data3)
summary(LM)
abline(-106.241, 17.664, col = "purple")
abline(-32.044, 5.998,col = "black")
abline(-55.306,9.571, col = "red")
summary(emtrends(LM, ~Cue, var = "pH"))
contrast((emtrends(LM, ~Cue, var = "pH")), method = 'tukey')
data3$Cue[data3$Cue == 0] = "no cue"
data3$Cue[data3$Cue == 1] = "pisaster"
data3$Cue[data3$Cue == 2] = "crab"
plot(avdiscent ~ pH, data = data3, bty = "n", type = "n", main = "av dis to cent (dispersion)", ylab = "max distance (cm)", xlab = "pH treatment")
points(avdiscent ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(avdiscent ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(avdiscent ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
data3 = data3[data3$wand < 20,]
plot(wand ~ pH, data = data3, bty = "n", type = "n", main = "wandering", ylim = c(0,20))
points(wand ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
lines(x = c(6,8.1), y = c(1.04,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
points(wand ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
lines(x = c(6,8.1), y = c(1,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
points(wand ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
lines(x = c(6,8.1), y = c(1,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
points(wand ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
lines(x = c(6,8.1), y = c(1,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
points(wand ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
lines(x = c(6,8.1), y = c(1,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
legend(-23, 50, legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
data3 = data3[data3$wand < 20,]
plot(wand ~ pH, data = data3, bty = "n", type = "n", main = "wandering", ylim = c(0,20))
points(wand ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
lines(x = c(6,8.1), y = c(1.04,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
points(wand ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
lines(x = c(6,8.1), y = c(1,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
points(wand ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
lines(x = c(6,8.1), y = c(1,1)) #line at 1; values > 0 mean high wandering, < 0 low wandering
qqnorm(data3$wand2, main="Normal Q-Q plot", xlab="Theoretical quantiles", ylab="Sample quantiles")
QQ= lm(data3$wand2 ~ data3$pH * data3$Cue)
shapiro.test(QQ$residuals) #not normal dist.
hist(data3$wand2)
data3$wand2 = (data3$wand)^.2
data3$Cue[data3$Cue == 0] = "no cue"
data3$Cue[data3$Cue == 1] = "pisaster"
data3$Cue[data3$Cue == 2] = "crab"
plot(mdist ~ pH, data = data3, bty = "n", type = "n", main = "max distance from origin", ylab = "max distance (cm)", xlab = "pH treatment")
points(mdist ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(mdist ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(mdist ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
legend('topleft', legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
LM1 = lm(mdist ~ pH * Cue, data = data3)
summary(LM)
summary(LM1)
data3$Cue[data3$Cue == 0] = "no cue"
data3$Cue[data3$Cue == 1] = "pisaster"
data3$Cue[data3$Cue == 2] = "crab"
plot(avedis2 ~ pH, data = data3, bty = "n", type = "n", main = "ave distance from origin", ylab = "distance(cm)", xlab = "pH treatment")
points(avedis2 ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(avedis2 ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(avedis2 ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
legend('topleft', legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
LM = lm(avedis2 ~ pH * Cue, data = data3)
summary(LM)
LM1 = lm(avedis2 ~ pH * Cue, data = data3)
summary(LM1)
LM1 = lm(mdist ~ pH * Cue, data = data3)
summary(LM1)
plot(mdist ~ pH, data = data3, bty = "n", type = "n", main = "max distance from origin", ylab = "max distance (cm)", xlab = "pH treatment")
points(mdist ~ pH, data = data3[data3$Cue == "pisaster",], col = "purple", pch = 19)
points(mdist ~ pH, data = data3[data3$Cue == "crab",], col = "red", pch = 19)
points(mdist ~ pH, data = data3[data3$Cue == "no cue",], col = "black", pch = 19)
legend('topleft', legend =c('pisaster', 'crab', 'no cue'),
box.lty = 0,
fill = c('purple', 'red', 'black'),  bg= 'white')#adding a figure legend
LM1 = lm(mdist ~ pH * Cue, data = data3)
summary(LM1)
abline(-122.463, 20.699, col = "purple")
abline(-44.607, 8.347,col = "black")
abline(-69.501,12.273, col = "red")
summary(emtrends(LM1, ~Cue, var = "pH"))
contrast((emtrends(LM1, ~Cue, var = "pH")), method = 'tukey')
data = data[data$ind != 7 & data$ind != 192 & data$ind != 193 & data$ind != 194 & data$ind != 195 & data$ind != 39 & data$ind != 50 & data$ind != 67 & data$ind != 148 & data$ind != 205 & data$ind != 37 & data$ind != 79 & data$ind != 18 & data$ind != 188 & data$ind != 138 & data$ind != 140 & data$ind != 225 & data$ind != 128,]
View(data)
unique(data$time)
with(data,plot(dist~time, col = as.factor(data$treatment),pch = 19))
with(data,plot(dist~time, col = as.factor(data$treatment),pch = 19), xlim = c(0,10))
with(data,plot(dist~time, col = as.factor(data$treatment),pch = 19), xlim = c(0,10))
with(data,plot(dist~time, col = as.factor(data$treatment),pch = 19, xlim = c(0,10)))
data_start = data[data$time < 10,]
with(data_start,plot(dist~pH_ave, col = as.factor(data$treatment),pch = 19, xlim = c(0,10)))
with(data_start,plot(dist~pH_ave, col = as.factor(data$treatment),pch = 19,))
with(data_start,plot(dist~pH_ave, col = as.factor(data_start$treatment),pch = 19,))
data_start = data[data$time < 15,]
with(data_start,plot(dist~pH_ave, col = as.factor(data_start$treatment),pch = 19,))
data_start = data[data$time < 10,]
with(data_start,plot(dist~pH_ave, col = as.factor(data_start$treatment),pch = 19,))
LM1 = lm(mdist ~ pH * Cue, data = data_start)
View(data_start)
View(data)
LM1 = lm(dist ~ pH * Cue, data = data_start)
LM1 = lm(dist ~ pH_ave * treatment, data = data_start)
summary(LM1)
summary(LM1)
summary(emtrends(LM1, ~treatment, var = "pH_ave"))
contrast((emtrends(LM1, ~treatment, var = "pH_ave")), method = 'tukey')
data_start = data[data$time < 15,]
LM1 = lm(dist ~ pH_ave * treatment, data = data_start)
summary(LM1)
summary(emtrends(LM1, ~treatment, var = "pH_ave"))
contrast((emtrends(LM1, ~treatment, var = "pH_ave")), method = 'tukey')
data_start = data[data$time < 20,]
LM1 = lm(dist ~ pH_ave * treatment, data = data_start)
summary(emtrends(LM1, ~treatment, var = "pH_ave"))
contrast((emtrends(LM1, ~treatment, var = "pH_ave")), method = 'tukey')
summary(LM1)
with(data_start,plot(dist~pH_ave, col = as.factor(data_start$treatment),pch = 19))
data_start = data[data$time < 20,]
with(data_start,plot(dist~pH_ave, col = as.factor(data_start$treatment),pch = 19))
LM1 = lm(dist ~ pH_ave * treatment, data = data_start)
summary(LM1)
abline(-93.076, 15.4306, col = "purple")
abline(-34.4351, 6.1881,col = "black")
abline(-56.5533,9.5092, col = "red")
summary(emtrends(LM1, ~treatment, var = "pH_ave"))
contrast((emtrends(LM1, ~treatment, var = "pH_ave")), method = 'tukey')
with(data_start,plot(dist~pH_ave, col = as.factor(data_start$treatment),pch = 19, main = "dist travel in 20 min"))
abline(-93.076, 15.4306, col = "purple")
abline(-34.4351, 6.1881,col = "black")
abline(-56.5533,9.5092, col = "red")
