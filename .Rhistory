carb.m$gnet.obs = -data$corrdelta*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$gnet.abs = -data$delta*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$OmegaACC = carb.m$OmegaAragonite*exp(-8.340)/exp(-6.393)
carb.m$Q = -(carb.d$DIC - (carb.d$ALK)/2) / (data$delox/10^3)
median(na.omit(carb.m$Q))
med = function(x){median(na.omit(x))}
agg = aggregate(carb.m$Q,by=list(data$date.cat),FUN=med)
data$calcdelalk = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = 1,
alk0 = data$alk.0/10^6)*10^3 #mmol
data$calcdelalk.q = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = carb.m$Q,
alk0 = data$alk.0/10^6)*10^3 #mmol
#arrhenius, check derivation
#rate = b0 - b2*e^{b1*omega}
#data = two columns, first omega, second dissolution rate
#par = vector length 3, b0, b1, b2
arrhenius.fit = function(data,par){
omega = data[,1]
rate.obs = data[,2]
b0 = par[1]
b1 = par[2]
b2 = par[3]
rate.pred = b0 - b2 * exp(b1 * omega)
return(sum((rate.obs-rate.pred)^2))
}
#michaelis menten function
#rate = vmax * conc / (km + conc)
michment.fit = function(data,par){
conc = data[,1]
rate.obs = data[,2]
vmax = par[1]
km = par[2]
off = par[3]
rate.pred = ( (vmax * conc) / (km + conc) ) + off
return(sum((rate.obs-rate.pred)^2))
}
#shell
shell = data[which(data$treatment=='shell.long' | data$treatment=='shell.day'),]
shell.carb.m = carb.m[which(data$treatment=='shell.long' | data$treatment=='shell.day'),]
shell.carb.m$delalk.shell.obs = -shell$delta*shell$h2o.kg/2/shell$duration/shell$wet.wt
shell.carb.m$delalk.shell = -shell$calcdelalk*shell$h2o.kg/2/shell$duration/shell$wet.wt
plot(shell.carb.m$OmegaAragonite,shell.carb.m$delalk.shell.obs,col=as.factor(shell$date.out));abline(h=0,v=1)
plot(shell.carb.m$OmegaCalcite,shell.carb.m$delalk.shell.obs,col=as.factor(shell$date.out));abline(h=0,v=1)
#use long incubation data
sfilt = shell.carb.m[which(shell$treatment=='shell.long' | shell$treatment=='shell.day'),][c(-20,-30,-53,-60,-74,-81,-88,-95),]
#compare different nonlinear fits to dissolution
#exponential
sm01 = lm(log(I(sfilt$delalk.shell.obs+1))~log(sfilt$OmegaAragonite))
diss.exp = exp(sm01$fitted.values)-1
#arrhenius
aopt = optim(fn=arrhenius.fit,par=c(b0=0.0005,b1=-1,b2=0.003),
data=data.frame(cbind(sfilt$OmegaAragonite,sfilt$delalk.shell.obs)))
dph.0 =  diff(c(8,data$calph.0[order(data$start.time)]))
dph.1 =  diff(c(8,data$calph.1[order(data$start.time)]))
dt.0 = data$ph.t.0-data$do.t.0
dt.1 = data$ph.t.1-data$do.t.1
diff = data$corrdelta-data$calcdelalk
excl1 = which(data$delam < -0.002 | data$delam > 0.08) #nh3 contamination
excl2.1 = which(data$date.cat=='july.2020' & data$delam>0.008) #nh3 contamination, different for july
excl2.5 = which(data$date.cat=='dec.2019' & data$delam>0.017) #nh3 contamination, different for december
excl2.6 = which(data$date.cat=='mar.2020' & data$delam>0.6) #nh3 contamination, different for december
excl2.7 = which(data$date.cat=='mar.2020' & carb.m$HCO3>0.003) #bad blanks
excl3 = which(abs(data$delta) > 0.07 | data$alk.sd.0>15 | data$alk.sd.1>15) # & data$date.cat!='july.2020') #super big alkalinity change that's probably titrator error
excl4 = which((data$date.cat=='jan.2020' & data$jar==25) |     #super low pH
(data$date.cat=='jan.2020' & data$jar==37) | #mud mussel
#(data$date.cat=='jan.2020' & data$jar==36) | #pH from alk bottle
#(data$date.cat=='jan.2020' & data$jar==21) | #weird electronic wobbles in pH
#(data$date.cat=='jan.2020' & data$jar==34) | #weird electronic wobbles in pH
#(data$date.cat=='jan.2020' & data$jar==4)  | #stirring
#(data$date.cat=='jan.2020' & data$jar==54) | #spec issue?
#(data$date.cat=='jan.2020' & data$jar==1)  | #stirring
#(data$date.cat=='jan.2020' & data$jar==2)  | #stirring
#(data$date.cat=='jan.2020' & data$jar==8)  | #stirring
#(data$date.cat=='jan.2020' & data$jar==9)  | #stirring
#(data$date.cat=='jan.2020' & data$jar==10) | #stirring
(data$date.cat=='jan.2020' & data$jar==42)  | #poor titration
(data$date.cat=='jan.2020' & data$jar==39)  | #poor titration
(data$date.cat=='sum.2019' & data$jar==3)   |#mud mussel
(data$date.cat=='sum.2019' & data$jar==21) )   #mixed up data recording
excl5 = which((data$date.cat=='mar.2020' & data$jar==17) |     #no nh3
(data$date.cat=='mar.2020' & data$jar==23) |   #no nh3
(data$date.cat=='mar.2020' & data$jar==49) |   #no alk
(data$date.cat=='mar.2020' & data$jar==55) |   #no nh3
(data$date.cat=='mar.2020' & data$jar==13) |   #spawner
(data$date.cat=='mar.2020' & data$jar==24) |   #spawner
(data$date.cat=='mar.2020' & data$jar==26) |   #spawner
(data$date.cat=='mar.2020' & data$jar==39) |   #spawner
(data$date.cat=='mar.2020' & data$jar==12) |
(data$date.cat=='mar.2020' & data$jar==44) )   #first of a new day
excl5.5 = which(data$date.cat == 'aug.2020.mid')
excl5.6 = which(data$date.cat == 'sep.2020.b' & data$jar==9)
excl6 = which(data$treatment != 'live') #ignore blanks for now
excl7 = which(carb.m$pCO2>100000) #offgassing potential
excl8 = which(data$first.sec=='second') #ignore double incubation for now
excl9 = which((data$date.cat=='nov.2019' & data$jar == 5) |  #titrator (sample mixing)
(data$date.cat=='nov.2019' & data$jar == 10)) #titrator (sample mixing)
excl10= which(data$date.cat=='sum.2018' | data$date.cat=='nov.2019' ) #bad blanks or weird pH
excl11= which(data$date.cat=='dec.2019' | data$date.cat=='sum.2019' )
#excl11= which(carb.m$OmegaACC>10) #get rid of potential for spontaneous ACC production?
excl = unique(c(excl1,excl2.1,excl2.5,excl2.7,excl3,excl4,excl5,excl5.5,excl5.6,excl6,excl7,excl8,excl9,excl10,excl11))
excl.12 = which(data$treatment!='blank')
excl.blanks = unique(c(excl1,excl2.1,excl2.5,excl2.6,excl2.7,excl3,excl4,excl5,excl5.5,excl7,excl8,excl9,excl10,excl11,excl.12))
excl.all = unique(c(excl1,excl2.1,excl2.5,excl2.6,excl3,excl4,excl5,excl7,excl8,excl9))
carb.m$delalk.obs = -data$corrdelta*data$h2o.kg/2/data$duration
carb.m$delalk = -data$calcdelalk*data$h2o.kg/2/data$duration
carb.m$diss = ( aopt$par[1] - aopt$par[3]*exp(aopt$par[2]*carb.m$OmegaAragonite) ) * data$shell.wt
#arrhenius, check derivation
#rate = b0 - b2*e^{b1*omega}
#data = two columns, first omega, second dissolution rate
#par = vector length 3, b0, b1, b2
arrhenius.fit = function(data,par){
omega = data[,1]
rate.obs = data[,2]
b0 = par[1]
b1 = par[2]
b2 = par[3]
rate.pred = b0 - b2 * exp(b1 * omega)
return(sum((rate.obs-rate.pred)^2))
}
#michaelis menten function
#rate = vmax * conc / (km + conc)
michment.fit = function(data,par){
conc = data[,1]
rate.obs = data[,2]
vmax = par[1]
km = par[2]
off = par[3]
rate.pred = ( (vmax * conc) / (km + conc) ) + off
return(sum((rate.obs-rate.pred)^2))
}
#arrhenius, check derivation
#rate = b0 - b2*e^{b1*omega}
#data = two columns, first omega, second dissolution rate
#par = vector length 3, b0, b1, b2
arrhenius.fit = function(data,par){
omega = data[,1]
rate.obs = data[,2]
b0 = par[1]
b1 = par[2]
b2 = par[3]
rate.pred = b0 - b2 * exp(b1 * omega)
return(sum((rate.obs-rate.pred)^2))
}
#michaelis menten function
#rate = vmax * conc / (km + conc)
michment.fit = function(data,par){
conc = data[,1]
rate.obs = data[,2]
vmax = par[1]
km = par[2]
off = par[3]
rate.pred = ( (vmax * conc) / (km + conc) ) + off
return(sum((rate.obs-rate.pred)^2))
}
aopt = optim(fn=arrhenius.fit,par=c(b0=0.0005,b1=-1,b2=0.003),
data=data.frame(cbind(sfilt$OmegaAragonite,sfilt$delalk.shell.obs)))
sm01 = lm(log(I(sfilt$delalk.shell.obs+1))~log(sfilt$OmegaAragonite))
diss.exp = exp(sm01$fitted.values)-1
aopt = optim(fn=arrhenius.fit,par=c(b0=0.0005,b1=-1,b2=0.003),
data=data.frame(cbind(sfilt$OmegaAragonite,sfilt$delalk.shell.obs)))
carb.0 = carb(flag = 8, var1 = data$calph.0, var2 = data$alk.0/10^6,
S = data$sal, T = data$do.t.0)
carb.0$H = 10^-(carb.0$pH)
carb.0$sir = carb.0$HCO3/carb.0$H
carb.1 = carb(flag = 8, var1 = data$calph.1, var2 = data$alk.1/10^6,
S = data$sal, T = data$do.t.1)
carb.1$H = 10^-(carb.1$pH)
carb.1$sir = carb.1$HCO3/carb.1$H
carb.m = (carb.0+carb.1)/2 #mean carbonate system for incubation
carb.d = (carb.1-carb.0) #difference in carbonate system during incubation
carb.p = carb.d/carb.m*100 #percent change in carbonate system during incubation
data$calcdelalk = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = 1,
alk0 = data$alk.0/10^6)*10^3 #mmol
#calculate biological response variables
carb.m$resp = -data$delox*data$h2o.kg/data$duration/data$gut.wt #mmol/hr/g  CORRECT FOR DENSITY
carb.m$gnet = -data$calcdelalk*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$gnet.obs = -data$corrdelta*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$gnet.abs = -data$delta*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$OmegaACC = carb.m$OmegaAragonite*exp(-8.340)/exp(-6.393)
carb.m$Q = -(carb.d$DIC - (carb.d$ALK)/2) / (data$delox/10^3)
median(na.omit(carb.m$Q))
med = function(x){median(na.omit(x))}
agg = aggregate(carb.m$Q,by=list(data$date.cat),FUN=med)
data$calcdelalk = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = 1,
alk0 = data$alk.0/10^6)*10^3 #mmol
data$calcdelalk.q = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = carb.m$Q,
alk0 = data$alk.0/10^6)*10^3 #mmol
#convert snpher temp to DO temp b/c sometimes it acted up
ind = which(data$date.cat!='sum.2018')
data$snph.0[ind] = pHinsi(pH = data$ph.0[ind], ALK = data$alk.0[ind]/10^6, Tinsi = data$do.t.0[ind], Tlab = data$ph.t.0[ind], S=data$sal[ind])
data$snph.1[ind] = pHinsi(pH = data$ph.1[ind], ALK = data$alk.1[ind]/10^6, Tinsi = data$do.t.1[ind], Tlab = data$ph.t.1[ind], S=data$sal[ind])
#convert spec pH to DO temp
ind0 = which(data$spec.0>0);ind1 = which(data$spec.1>1)
data$inspec.0[ind0] = pHinsi(pH = data$spec.0[ind0], ALK = data$alk.0[ind0]/10^6, Tinsi = data$do.t.0[ind0], Tlab = data$spec.t.0[ind0], S=data$sal[ind0])
data$inspec.1[ind1] = pHinsi(pH = data$spec.1[ind1], ALK = data$alk.1[ind1]/10^6, Tinsi = data$do.t.1[ind1], Tlab = data$spec.t.1[ind1], S=data$sal[ind1])
#combine time point 0 and 1 for the calibration
sniph = c(data$snph.0,data$snph.1)
specph = c(data$inspec.0,data$inspec.1)
dph = sniph - specph
date.cat = c(data$date.cat,data$date.cat)
time = c(data$start.time,data$end.time)
#loess fit
ind = which(specph>7.5)
highph=which(specph>7.5)
ind = highph[-c(26, 27, 30, 31, 33, 35, 36, 37, 69)] #outliers of sniph and specph curve
loe0 = loess(dph[ind]~time[ind],span=0.02)
data$pred.dph.0 = predict(loe0,newdata = data$start.time)
data$pred.dph.1 = predict(loe0,newdata = data$end.time)
data$calph.0 = data$snph.0-data$pred.dph.0
data$calph.1 = data$snph.1-data$pred.dph.1
ind = which(data$date.cat=='sum.2018')
data$calph.0[ind] = data$inspec.0[ind]
data$calph.1[ind] = data$inspec.0[ind]
ind0 = which(data$nbs.ph.0>0)
ind1 = which(data$nbs.ph.1>0)
nbsph = c(data$nbs.ph.0[ind0],data$nbs.ph.1[ind1])
nbsspec = c(data$spec.0[ind0],data$spec.1[ind1])
nbsdatecat = c(data$date.cat[ind0],data$date.cat[ind1])
julind = which(nbsdatecat=='july.2020')
m = lm(nbsspec[julind]~nbsph[julind])
abline(m)
carb.0 = carb(flag = 8, var1 = data$calph.0, var2 = data$alk.0/10^6,
S = data$sal, T = data$do.t.0)
carb.0$H = 10^-(carb.0$pH)
carb.0$sir = carb.0$HCO3/carb.0$H
carb.1 = carb(flag = 8, var1 = data$calph.1, var2 = data$alk.1/10^6,
S = data$sal, T = data$do.t.1)
carb.1$H = 10^-(carb.1$pH)
carb.1$sir = carb.1$HCO3/carb.1$H
carb.m = (carb.0+carb.1)/2 #mean carbonate system for incubation
carb.d = (carb.1-carb.0) #difference in carbonate system during incubation
carb.p = carb.d/carb.m*100 #percent change in carbonate system during incubation
data$calcdelalk = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = 1,
alk0 = data$alk.0/10^6)*10^3 #mmol
#calculate biological response variables
carb.m$resp = -data$delox*data$h2o.kg/data$duration/data$gut.wt #mmol/hr/g  CORRECT FOR DENSITY
carb.m$gnet = -data$calcdelalk*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$gnet.obs = -data$corrdelta*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$gnet.abs = -data$delta*data$h2o.kg/data$duration/data$gut.wt/2 #mmol/hr/g
carb.m$OmegaACC = carb.m$OmegaAragonite*exp(-8.340)/exp(-6.393)
carb.m$Q = -(carb.d$DIC - (carb.d$ALK)/2) / (data$delox/10^3)
median(na.omit(carb.m$Q))
med = function(x){median(na.omit(x))}
agg = aggregate(carb.m$Q,by=list(data$date.cat),FUN=med)
data$calcdelalk = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = 1,
alk0 = data$alk.0/10^6)*10^3 #mmol
data$calcdelalk.q = calc.delalk(do0 = data$caldo.0/10^6,
do1 = data$caldo.1/10^6,
ph0 = data$calph.0,
ph1 = data$calph.1,
S0 = data$sal,
S1 = data$sal,
T0 = data$do.t.0,
T1 = data$do.t.1,
Q = carb.m$Q,
alk0 = data$alk.0/10^6)*10^3 #mmol
#arrhenius, check derivation
#rate = b0 - b2*e^{b1*omega}
#data = two columns, first omega, second dissolution rate
#par = vector length 3, b0, b1, b2
arrhenius.fit = function(data,par){
omega = data[,1]
rate.obs = data[,2]
b0 = par[1]
b1 = par[2]
b2 = par[3]
rate.pred = b0 - b2 * exp(b1 * omega)
return(sum((rate.obs-rate.pred)^2))
}
#michaelis menten function
#rate = vmax * conc / (km + conc)
michment.fit = function(data,par){
conc = data[,1]
rate.obs = data[,2]
vmax = par[1]
km = par[2]
off = par[3]
rate.pred = ( (vmax * conc) / (km + conc) ) + off
return(sum((rate.obs-rate.pred)^2))
}
#shell
shell = data[which(data$treatment=='shell.long' | data$treatment=='shell.day'),]
shell.carb.m = carb.m[which(data$treatment=='shell.long' | data$treatment=='shell.day'),]
shell.carb.m$delalk.shell.obs = -shell$delta*shell$h2o.kg/2/shell$duration/shell$wet.wt
shell.carb.m$delalk.shell = -shell$calcdelalk*shell$h2o.kg/2/shell$duration/shell$wet.wt
plot(shell.carb.m$OmegaAragonite,shell.carb.m$delalk.shell.obs,col=as.factor(shell$date.out));abline(h=0,v=1)
plot(shell.carb.m$OmegaCalcite,shell.carb.m$delalk.shell.obs,col=as.factor(shell$date.out));abline(h=0,v=1)
#use long incubation data
sfilt = shell.carb.m[which(shell$treatment=='shell.long' | shell$treatment=='shell.day'),][c(-20,-30,-53,-60,-74,-81,-88,-95),]
#compare different nonlinear fits to dissolution
#exponential
sm01 = lm(log(I(sfilt$delalk.shell.obs+1))~log(sfilt$OmegaAragonite))
diss.exp = exp(sm01$fitted.values)-1
#arrhenius
aopt = optim(fn=arrhenius.fit,par=c(b0=0.0005,b1=-1,b2=0.003),
data=data.frame(cbind(sfilt$OmegaAragonite,sfilt$delalk.shell.obs)))
dat = read.csv('postfilter.csv')
dat = dat[which(is.finite(dat$grosscalc)),]
dat$invh = 1/dat$h
dat$grossnogut = dat$grosscalc*dat$gut.wt
calclabel = expression(paste('Gross Calcification Rate (mmol ',g^-1,' h',r^-1,')'))
bicarblabel = expression(paste(paste("","HCO")[3]^"-",' (mmol k',g^'-1',')'))
omalabel = expression(paste(Omega['aragonite']))
logomalabel = expression(paste('log(',Omega['aragonite'],')'))
phlabel = expression(paste('pH'['total']))
pco2label = expression(paste(pCO[2]))
invphlabel = expression(paste('pH'['total']^-1))
hlabel = expression(paste('[H]'))
invhlabel = expression(paste('[H]'^-1))
sirlabel = expression(paste(paste('SIR ([HCO')[3]^'-','] [H]'^'-1',')'))
n=10
rbPal = colorRampPalette(c('red','blue','green','orange'))
omcol = rbPal(n)[as.numeric(cut(dat$omegaaragonite,breaks=n))]
bicol = rbPal(n)[as.numeric(cut(dat$hco3,breaks=n))]
calccol = rbPal(n)[as.numeric(cut(dat$grosscalc,breaks=n))]
invhcol = rbPal(n)[as.numeric(cut(dat$invh,breaks=n))]
phcol =  rbPal(n)[as.numeric(cut(dat$ph,breaks=n))]
hcol = rbPal(n)[as.numeric(cut(dat$h,breaks=n))]
siz = 1#((dat$grosscalc - min(dat$grosscalc))+10) / max(dat$grosscalc)
se = function(x){y=sd(x)/sqrt(length(x));return(y)}
clus.mean = aggregate(dat,by=list(dat$cluster),FUN=mean)[-1,]
dat = dat[which(complete.cases(dat)),]
dat$invh = 1/dat$h
calclabel = expression(paste('Calcification Rate (mmol ',g^-1,' h',r^-1,')'))
omalabel = expression(paste(Omega['aragonite']))
bicarblabel = expression(paste(paste("","HCO")[3]^"-",' (mmol k',g^'-1',')'))
carblabel = expression(paste(paste("","CO")[3]^"-",' (mmol k',g^'-1',')'))
plot(dat$hco3*10^3,dat$omegaaragonite,col=as.factor(dat$date.cat),ylab=omalabel,xlab=bicarblabel)
library(nlme)
library(lme4)
library(emmeans)
library(MuMIn)
library(dplyr) #create new dataframe
library(tidyr) #create new dataframe
#library(jtools)
library(readxl) #read in excel files
getwd()
setwd("/Users/alishamsaley/Documents/GitHub/TF_CP3/")
install.packages('fitdisrplus')
setRepositories()
install.packages('fitdistrplus')
library(fitdistrplus)
data = as.data.frame(read_xlsx('/Users/alishamsaley/Documents/GitHub/TF_CP3/FullData_corrected.xlsx'))
data$treatment[data$treatment == "carb"] = "crab"
unique(data$treatment)
data$pH_round = round(x = data$pH_ave, digits = 2)
data = data[data$ind != 7 & data$ind != 192 & data$ind != 193 & data$ind != 194 & data$ind != 195 & data$ind != 39 & data$ind != 50 & data$ind != 67 & data$ind != 148 & data$ind != 205 & data$ind != 37 & data$ind != 79 & data$ind != 18 & data$ind != 188 & data$ind != 138 & data$ind != 140 & data$ind != 225 & data$ind != 128 & data$ind != 186 & data$ind != 17,] #ind 186 and 17 are maybes
str(data) #structure of the dataset
head(data) #shows the first few lines of the dataframe
tail(data) #shows the tail end of the datafram
data$treatment[data$treatment == "no cue"] = 0
data$treatment[data$treatment == "pisaster" ] = 1
data$treatment[data$treatment == "crab"] = 2
data$treatment = as.numeric(data$treatment)
data$ind = as.factor(data$ind)
d1 = as.data.frame(data%>% group_by(ind) %>% dplyr::summarise(trial = mean(Trial_main), arena = mean(bin), accbin = mean(acclim), pH = mean(pH_round), cue = mean(treatment), P_in1 = sum(in_out)/n(), P_in2 = sum(in_out2)/n(), In1 = sum(in_out), In2 = sum(in_out2), Total = length(ind), Out1 = Total - In1, Out2 = Total - In2, P_out1 = 1-P_in1, P_out2 = 1-P_in2, Corner = sum(corner), Not_cor = Total - Corner, Wall = sum(wall), Not_wall = Total - Wall, Bottom = sum(bottom), Not_bot = Total - Bottom, P_cor = sum(corner)/Total, P_wall = sum(wall)/Total, P_bot = sum(Bottom)/Total))
d1$cue[d1$cue == "0"] = "no cue"
d1$cue[d1$cue == "1"] = "pisaster"
d1$cue[d1$cue == "2"] = "crab"
d1$trial = as.factor(d1$trial)
d1$accbin = as.factor(d1$accbin)
d1$cue = as.factor(d1$cue)
str(data)
hist(d1$P_out1) #count data; not normally distributed at all! need to transform
hist(d1$P_out2) #count data; not normally distributed at all! need to transform
descdist(data = d1, discrete = T, boot = NULL, method = "sample", graph = T, obs.pch = 19, boot.col = "blue")
descdist(data = d1$P_out2, discrete = T, boot = NULL, method = "sample", graph = T, obs.pch = 19, boot.col = "blue")
descdist(rpois(100,lambda=2),discrete=TRUE,boot=500)
descdist(data = d1$P_out1, discrete = T, boot = NULL, method = "sample", graph = T, obs.pch = 19, boot.col = "blue")
descdist(data = d1$P_out2, discrete = T, boot = NULL, method = "sample", graph = T, obs.pch = 19, boot.col = "blue")
descdist(data = d1$P_out2, discrete = T, boot = 1000, method = "sample", graph = T, obs.pch = 19, boot.col = "blue")
descdist(data = d1$Out2, discrete = T, boot = 1000, method = "sample", graph = T, obs.pch = 19, boot.col = "blue")
descdist(data = d1$Out2, discrete = T, boot = 1000, method = "unbiased", graph = T, obs.pch = 19, boot.col = "blue")
obs = data.frame(x = d1$ind, y = d1$Out2)
descdist(data = obs, discrete = T, boot = 1000, method = "unbiased", graph = T, obs.pch = 19, boot.col = "blue")
mod.full = glmer(P_out2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = poisson)
mod.full = glmer(P_out2 ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = poisson)
warnings()
mod.full = glmer(P_out2 ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial)
mod.full = glmer(P_out2 ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.full = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
summary(mod.full)
summary(mod.full)
summary(mod.full)
dotchart(d1$P_out1, col = as.factor(d1$cue)) #dotchart(data$response); can color by random effects/clusters
mod.full = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
summary(mod.full)
mod.full = glmm(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)), method = "ML")
mod.full = glmmTMB(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)), method = "ML")
mod.full.glmer = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)), method = "ML")
mod.full.glmer = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.full.glmmpql <- glmmPQL(cbind(Out2,In2) ~ cue * pH, random = ~1|ind, family = binomial, data = d1)
summary(mod.full.glmmpql)
mod.full.glmmML <- glmmML(cbind(Out2,In2) ~ cue * pH, cluster = ind, family= binomial, data = d1)
install.packages('glmmML')
library(glmmML) #for choosing which model to start with
mod.full.glmer = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.full.glmmpql <- glmmPQL(cbind(Out2,In2) ~ cue * pH, random = ~1|ind, family = binomial, data = d1)
mod.full.glmmML <- glmmML(cbind(Out2,In2) ~ cue * pH, cluster = ind, family= binomial, data = d1)
anova(mod.full.glmer, mod.full.glmmpql, mod.full.glmmML)
anova(mod.full.glmer, mod.full.glmmpql)
summary(mod.full.glmer)
summary(mod.full.glmmpql)
summary(mod.full.glmmML)
anova(mod.full.glmer, mod.full.glmmML)
summary(mod.full.glmmML)
summary(mod.full.glmer) #AIC 618.4
mod.full = glmer(cbind(Out2, In2) ~ cue * pH + (1|ind)+ (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.accbin <- glmer(cbind(Out2, In2) ~ cue * pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
anova(mod.full, mod.accbin) #AIC does not improve with accbin and p value = 0.26; can drop accbin from model
mod.ind <- glmer(cbind(Out2, In2) ~ cue * pH + (1|accbin), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
anova(mod.full, mod.ind) #AIC improves with ind and p value < 0.05 ; keep ind
mod.full <- glmer(cbind(Out2, In2) ~ cue * pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.inter <- glmer(cbind(Out2, In2) ~ cue + pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
anova(mod.full, mod.inter) #does not show an interaction between pH and Cue. drop the interaction; this means that the SHAPE of the curves are not significantly different; ie, the way that cue interacts across pH on behavior is conserved.
mod.full.new <- glmer(cbind(Out2, In2) ~ cue + pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.pH <- glmer(cbind(Out2, In2) ~ cue + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
mod.cue <- glmer(cbind(Out2, In2) ~ pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
anova(mod.full.new,mod.pH) #pH improves model with AIC and p value <0.05
anova(mod.full.new,mod.cue) #cue improves model with AIC and p value < 0.05
mod.final <- glmer(cbind(Out2, In2) ~ cue + pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
plot(mod.final)
plot(mod.final)
mod.final <- glmer(cbind(Out2, In2) ~ cue + pH + (1|ind), data = d1, family = binomial,control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=100000)))
plot(mod.final)
qqnorm(resid(mod.final))
plot(mod.final)
qqnorm(resid(mod.final))
qqline(resid(mod.final))
plot(resid(mod.final))
plot(resid(mod.final)~d1$pH)
summary(mod.final)
trend1 = emmeans(mod.final, ~cue, var = "pH")
summary(trend1)
contrast(trend1, method = 'tukey')
d1.1 = expand.grid(pH = seq(from = 6.5, to = 8.0, by = 0.05), cue = c('crab', 'no cue', 'pisaster'), Out2 = 0, In2 = 0)
mm1 = model.matrix(terms(mod.final), d1.1)
d1.1$out = mm1%*%fixef(mod.final)
pvar1 = diag(mm1%*%tcrossprod(vcov(mod.final), mm1))
cmult = 1.96
newdat1 = data.frame(d1.1, plo = d1.1$out - cmult * sqrt(pvar1), phi = d1.1$out + cmult * sqrt(pvar1))
plot(plogis(out) ~ pH, ylim = c(0,1), xlim = c(6.5,8.0), data = d1.1, bty = "n", type = "n", ylab = "Proportion of time Out", xlab = "pH (Total scale)")
CrCI = newdat1[newdat1$cue == "crab",]
PCI = newdat1[newdat1$cue == "pisaster",]
NoCI = newdat1[newdat1$cue == "no cue",]
polygon(c(CrCI$pH,rev(CrCI$pH)),c(plogis(CrCI$plo),rev(plogis(CrCI$phi))),col="light pink", border = NA)
polygon(c(PCI$pH,rev(PCI$pH)),c(plogis(PCI$plo),rev(plogis(PCI$phi))),col="thistle", border = NA)
polygon(c(NoCI$pH,rev(NoCI$pH)),c(plogis(NoCI$plo),rev(plogis(NoCI$phi))),col="grey85", border = NA)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'pisaster',], col = "orchid4", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'crab',], col = "red", pch = 16)
points(plogis(out) ~ pH, data = d1.1[d1.1$cue == 'no cue',], col = "black", pch = 16)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "crab",], col = "red", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "pisaster",], col = "orchid4", lty = 4, lwd = 2)
lines(plogis(plo)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
lines(plogis(phi)~pH, data = newdat1[newdat1$cue == "no cue",], col = "black", lty = 4, lwd = 2)
